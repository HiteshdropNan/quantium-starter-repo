name: Soul Foods Dash App CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check if data file exists
      run: |
        if [ ! -f "formatted_data.csv" ]; then
          echo "Data file not found, running data processing..."
          python process_data.py
        fi
    
    - name: Run tests with pytest
      run: |
        python -m pytest test_dash_app.py -v --tb=short
    
    - name: Run alternative test method (fallback)
      if: failure()
      run: |
        python test_dash_app.py --summary

  test-windows:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Check if data file exists
      run: |
        if (!(Test-Path "formatted_data.csv")) {
          Write-Host "Data file not found, running data processing..."
          python process_data.py
        }
      shell: powershell
    
    - name: Run CI test script
      run: |
        .\ci_test.bat
      shell: cmd

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
      continue-on-error: true
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
      continue-on-error: true